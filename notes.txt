getIds.sh fetches the internal film id numbers from the website
get_showings.sh <id> fetches all the showing data for a specific film

showings.json contains an array of all the outputs of get_showings.sh

The csv for import into google needs
Subject, Start Date, Start Time, End Time, All Day Event, Description, Location
"I Am Martin Parr", "02-25-2025", "1:10 PM","2:18 PM", False, "", "GFT 1"

Expand the original json to one movie record for each showing date
cat allmovies.json | jq -r '.[] | . as $entry | .datesWithPublicShowing |  .[] | [ {"date":. } + $entry} ]' > bydate.json
  movies2.json is just an array of movies with the top level stripped

jq -r '. | map([.id, .date, (.name|tojson), .duration, (.synopsis|gsub("[\\n]"; " ")|tojson), (.starring|tojson), (.genre|tojson), (.allGenres|tojson), (.directedBy|tojson),(.rating|tojson), (.ratingReason|tojson)] | join(", ")) | join("\n")' bydate.json > bydate.csv


id.txt pulls the data for each film individually with times, screens and badges

jq -r '. | map([.id, .time, .screenId, (.movie.name|tojson), .movie.duration, (.movie.synopsis|gsub("[\\n]"; " ")|tojson), (.movie.starring|tojson), (.movie.genre|tojson), (.movie.allGenres|tojson), (.movie.directedBy|tojson),(.movie.rating|tojson), (.movie.ratingReason|tojson), .movie.trailerYoutubeId, (.showingBadgeIds|tojson)] | join(", ")) | join("\n")' movies-with-times-array.json > movies.csv


jq -r --slurpfile screens screenmap.json --slurpfile strands strands.json '
(reduce ($strands[][] | { (.id):.title }) as $e ({}; . + $e)) as $str | 
(reduce ($screens[][] | { (.id):.name  }) as $e ({}; . + $e)) as $scr | 
map([.id, .time, ($scr[.screenId]|tojson), (.movie.name|tojson), .movie.duration, (.movie.synopsis|gsub("[\\n]"; " ")|tojson), (.movie.starring|tojson), (.movie.genre|tojson), (.movie.allGenres|tojson), (.movie.directedBy|tojson),(.movie.rating|tojson), (.movie.ratingReason|tojson), ($str["870"]|tojson), .movie.trailerYoutubeId, (.showingBadgeIds|tojson)] | join(", ")) | join("\n")' movies-with-times-array.json > movies.csv



= Create the input for the brochure
jq --slurpfile ref ref.json 'import "gff" as gff; . | gff::generateBrochure ' showings-array.json | jq -s "."

